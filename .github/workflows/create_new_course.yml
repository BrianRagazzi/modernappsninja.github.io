name: create new course workfow
on:
  workflow_dispatch:
    inputs:
      course_title:
        description: 'Course Title'
        required: true
        default: 'The title of your course'
      course_short_title:
        description: 'Course Short Title - up to 26 chars, no spaces, chars must be valid to use in URL'
        required: true
        default: 'introtoicesculpting'
      code_stub:
        description: 'Enter Two lowercase Letters of your choice, no special chars. This will be prepended to a random number to create your content ID'
        required: true
        default: 'ab'
      course_description:
        description: 'One line Course Description'
        required: true
        default: 'The description of your course'
      course_tags:
        description: 'Enter each tag in quotes, comma seperated, example: "tag1","tag2"'
        required: true
        default: '"tag1","tag2"'

jobs:
  create_new_course:
    name: create new course job
    runs-on: ubuntu-latest
    steps:
      - name: cat payload file
        run: cat /home/runner/work/_temp/_github_workflow/event.json
      - name: initialize git
        run: |
          git config --global user.name modernappsninjabot
          git config --global user.email modernappsninjabot@gmail.com
          git init
      - name: set envar current_date with current date
        run: |
          echo current_date=$(date -u +"%Y-%m-%dT%TZ") >> $GITHUB_ENV
## For content ID creation, he while based logic below is preferred over current method, however, actions does not currently support loops in bash
## Leaving the logic here for reference as in future use this if actins adds loop support or move to similar in container or javascript action
      # - name: create content ID
      #   run: |
      #     # set content loop counter to 0
      #     echo content_id_loop=0 >> $GITHUB_ENV
      #     # use while loop to repeat content id random selection until unique value is found
      #     while [ ${{ env.content_id_loop }} -eq 0 ]; do
      #       echo content_id_random=$(echo $(shuf -i 1001-9799 -n1)) >> $GITHUB_ENV
      #       echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      #       # curl content id index to see if candidate ID is available
      #       curl \
      #         -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id
      #       # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
      #       if [ $(wc -l <"/tmp/check_content_id") -ge 5 ]
      #       then
      #         echo "this ID is in use"
      #       else
      #         echo "this id value is not yet in use, please proceed"
      #         echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
      #         # set the content id loop value to 1 to exit the loop after this run
      #         echo content_id_loop=1 >> $GITHUB_ENV
      #         # create course_repo_name
      #         echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id }} >> $GITHUB_ENV
      #         # post the new content id file to the content id index collection
      #         curl -X PUT \
      #           -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #           -H "Accept: application/vnd.github.v3+json" \
      #           -d '{"message": "Adding new content ID: ${{ env.content_id }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
      #           "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id }}" \
      #           -o /tmp/content_id_post_response.json
      #         cat /tmp/content_id_post_response.json
      #       fi
      #     done
      - name: initialize variables for course id creation
        run: |
          echo content_id_ready=0 >> $GITHUB_ENV
          echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
      - name: initialize content_id_candidate value for course id creation
        run: |
          echo $content_id_ready
          echo $content_id_random
          echo content_id_candidate=${{ github.event.inputs.code_stub }}${{ env.content_id_random }} >> $GITHUB_ENV
      - name: Course ID create Attempt 1
        run: |
          echo $content_id_candidate
          # curl content id index to see if content_id_candidate is already present
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id
          # extract name field from response - note that name field is only present if id is found in index
          cat /tmp/check_content_id | jq -r '.name' >> /tmp/check_content_id_response_name
          # if the file exists, return will include a name field with the name which should match the content_id_candidate value
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 2
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 2
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 3
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 3
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 4
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 4
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: TEMP - for initial run to create course template, set repository name for source template to be copied as source_repo_name
        run: |
          echo source_repo_name="vSphereTanzu101_VT7933" >> $GITHUB_ENV
          echo ${{ env.source_repo_name }}
      - name: curl member record file
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/modernappsninja/admin-private/main/userdata/members/${{ github.event.sender.login }}_${{ github.event.sender.id }}.json" \
          -o /tmp/member_record.json
      - name: clone ninja_course_template
        run: |
          git clone https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/modernappsninja/${{ env.source_repo_name }}.git
      # - name: create hub config file
      #   run: |
      #     echo "---" > ~/.config/hub
      #     echo "github.com: " >> ~/.config/hub
      #     echo "- oauth_token: ${{ secrets.NINJABOTGURU }}" >> ~/.config/hub
      #     echo "  user: modernappsninjabot" >> ~/.config/hub
      #     cat ~/.config/hub
      - name: extract firstName from member_record and set as first_name
        run: |
          echo $(echo first_name=$(echo $(cat /tmp/member_record.json | jq '.firstName' | sed 's/"//g' ))) >> $GITHUB_ENV
          echo $first_name
      - name: extract lastName from member_record and set as last_name
        run: |
          echo $(echo last_name=$(echo $(cat /tmp/member_record.json | jq '.lastName' | sed 's/"//g' ))) >> $GITHUB_ENV
          echo $last_name
      # - name: envsubst config.toml file
      #   run: |
      #     cd ${{ env.source_repo_name }}
      #     envsubst <"config.toml" > config.toml.tmp
      #     mv -f config.toml.tmp config.toml
      #     cat config.toml
      # - name: envsubst homepage.yml file
      #   run: |
      #     cd member_repo_template
      #     envsubst <"data/en/homepage.yml" > /tmp/homepage.yml.tmp
      #     mv -f /tmp/homepage.yml.tmp data/en/homepage.yml
      #     cat data/en/homepage.yml
      - name: envsubst git config file
        run: |
          cd ${{ env.source_repo_name }}
          envsubst <"static/admin/assets/git_config_template.txt" > /tmp/git_config
          mv -f /tmp/git_config .git/config
          cat .git/config
      - name: envsubst course metadata file
        run: |
          cd ${{ env.source_repo_name }}
          envsubst <"static/admin/assets/coursecards/course_meta.yml" > /tmp/course_meta.yml.tmp
          mv -f /tmp/course_meta,yml.tmp static/admin/assets/coursecards/course_meta.yml
          cat static/admin/assets/coursecards/course_meta.yml
      # - name: create new member repository
      #   run: |
      #     curl -X POST \
      #     -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #     -d '{"name":"${{ github.event.client_payload.member_login }}"}' \
      #     "https://api.github.com/orgs/modernappsninja/repos" \
      #     -o /tmp/member_repo_create_curl_response.json
      #     cat /tmp/member_repo_create_curl_response.json
      # - name: prep local directory for new member repo content
      #   run: |
      #     cp -R member_repo_template ${{ github.event.client_payload.member_login }}
      #     cd ${{ github.event.client_payload.member_login }}
      #     sudo rm -r .git/
      #     git init
      #     git add .
      #     git commit -m "initial setup for ${{ github.event.client_payload.member_login }} member repo"
      #     git branch -M main
      #     git remote add origin https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/modernappsninjas/${{ github.event.client_payload.member_login }}.git
      #     git push -u origin main
      # - name: Setup Hugo
      #   uses: peaceiris/actions-hugo@v2
      #   with:
      #     hugo-version: 'latest'
      #     extended: true
      # - name: initial hugo build
      #   run: |
      #     cd ${{ github.event.client_payload.member_login }}
      #     echo "public" >> .gitignore
      #     git checkout --orphan gh-pages
      #     git reset --hard
      #     git commit --allow-empty -m "Initializing gh-pages branch"
      #     git push origin gh-pages
      #     git checkout main
      #     sudo rm -rf public
      #     git worktree add -B gh-pages public origin/gh-pages
      #     hugo --minify
      #     cd public
      #     git add --all
      #     git commit -m "Publishing to gh-pages"
      #     cd ..
      #     git push origin gh-pages
      # - name: enable github pages for new member repo
      #   run: |
      #     curl -X POST \
      #     -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #     -H "Accept: application/vnd.github.switcheroo-preview+json" \
      #     -d '{"source":{"branch":"gh-pages","path":"/"}}' \
      #     "https://api.github.com/repos/modernappsninjas/${{ github.event.client_payload.member_login }}/pages" \
      #     -o /tmp/member_repo_enable_pages_response.json
      #     cat /tmp/member_repo_enable_pages_response.json